{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["spreadsheetId","runQuery","query","url","encodeURIComponent","fetch","then","response","text","byRowNum","rowNum","parseCsv","csv","csvtojson","noheader","output","fromString","renderRow","row","search","filter","Boolean","map","word","index","split","segment","arr","length","Fragment","className","renderSkeleton","skeleton","Array","nothing","App","inputRef","useRef","textRef","useState","placeholderHeight","setPlaceholderHeight","loading","setLoading","showIntro","setShowIntro","setSearch","trimmedSearch","setTrimmedSearch","searchHistory","setSearchHistory","searchResult","setSearchResult","wordOfDay","setWordOfDay","count","setCount","onSearchChange","useCallback","event","target","value","trim","pushSearchHistory","key","prevSearchHistory","now","useMemo","Date","useEffect","current","focus","todayDiff","Math","floor","getTimezoneOffset","a","str","lines","JSON","parse","Number","rows","wordOfDayRows","hasOwnProperty","timeoutId","window","setTimeout","resultLines","clearTimeout","el","Element","getBoundingClientRect","height","ref","onChange","placeholder","style","isArray","getFullYear","getMonth","getDate","href","rel","slice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99733ffe.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport csvtojson from 'csvtojson';\n\n\nconst spreadsheetId = '106i6RLyxQYh-jgEnPxZ3TX3C-VT3-k7vY-7gdfoLTyI';\n\nfunction runQuery (query) {\n    /**\n     * Param \"tqx=out:csv\" is that the data should be responded as CSV format;\n     * \"range=A2:G\" is that the range will exclude the first row (header row)\n     * \"tq=xxx\" is the content of the \"Google Visualization API Query Language\"\n     * @see https://developers.google.com/chart/interactive/docs/querylanguage\n     */\n    const url = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&range=A2:G&tq=${encodeURIComponent(query)}`;\n    return fetch(url)\n      .then(response => response.text());\n}\n\nfunction countRows (query) {\n    return runQuery(\"SELECT COUNT(A)\")\n      .then(str => str.split(\"\\n\"))\n      .then(lines => lines[lines.length - 1])\n      .then(JSON.parse)\n      .then(Number);\n}\n\nfunction byRowNum (rowNum) {\n  const url = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/gviz/tq?tqx=out:csv&range=A${rowNum + 1}:G${rowNum + 1}`;\n  return fetch(url)\n   .then(response => response.text());\n}\n\nfunction parseCsv (csv) {\n    return csvtojson({noheader: true, output: 'csv'}).fromString(csv);\n}\n\nfunction renderRow (row, search = /$a/) {\n  return row.filter(Boolean).map((word, index) => {\n    const output = word.split(search).map((segment, index, arr) => {\n      if (arr.length - 1 === index) { return segment; }\n      return <React.Fragment key={index}>{segment}<div className=\"app__highlight\">{search}</div></React.Fragment>;\n    });\n    if (index === 0) { return (<code key={index} className=\"app__word app__word--chinese\">{output}</code>); }\n    return (<div key={index} className=\"app__word app__word--korean\">{index}. {output}</div>);\n  });\n}\n\nfunction renderSkeleton (rowNum = 1) {\n    const skeleton = [...Array(rowNum)].map((nothing, index) => (\n      <tr key={index}>\n        <td>\n          <code className=\"app__word app__word--chinese app__word--placeholder\">...........</code>\n          <div className=\"app__word app__word--korean\">1. <span className=\"app__word-placeholder app__word-placeholder--background-color\">..................................................................</span></div>\n          <div className=\"app__word app__word--korean\">2. <span className=\"app__word-placeholder app__word-placeholder--background-color\">............................................</span></div>\n          <div className=\"app__word app__word--korean\">3. <span className=\"app__word-placeholder app__word-placeholder--background-color\">....................................................................................</span></div>\n        </td>\n      </tr>\n    ));\n    return (\n      <table className=\"app__table\">\n        <tbody>\n          {skeleton}\n        </tbody>\n      </table>\n    );\n}\n\n\n\n\nfunction App() {\n  // ==========\n  // Refs\n  // ==========\n  const inputRef = useRef();\n  const textRef = useRef();\n\n  // ==========\n  // States\n  // ==========\n  const [placeholderHeight, setPlaceholderHeight] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [showIntro, setShowIntro] = useState(true);\n  const [search, setSearch] = useState('');\n  const [trimmedSearch, setTrimmedSearch] = useState('');\n  const [searchHistory, setSearchHistory] = useState({}); // TODO\n  const [searchResult, setSearchResult] = useState(null);\n  const [wordOfDay, setWordOfDay] = useState(null);\n  const [count, setCount] = useState(null);\n\n  // ==========\n  // Callbacks\n  // ==========\n  const onSearchChange = useCallback(event => {\n      setLoading(true);\n      setShowIntro(false);\n      setSearch(event.target.value);\n      setTrimmedSearch(event.target.value.trim());\n  }, []);\n  const pushSearchHistory = useCallback((key, value) => setSearchHistory(prevSearchHistory => ({...prevSearchHistory, [key]: value})), []);\n\n  // ==========\n  // Constants\n  // ==========\n  const now = useMemo(() => new Date(), []);\n\n  useEffect(() => {\n    textRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    const now = new Date();\n    const todayDiff = Math.floor(((+now) - (now.getTimezoneOffset() * 60 * 1000)) / (1000 * 60 * 60 * 24));\n\n    (async function () {\n      const rows = await countRows();\n      const wordOfDayRows = await byRowNum(rows - (todayDiff % rows));\n      setCount(rows);\n      parseCsv(wordOfDayRows).then(arr => arr[0]).then(setWordOfDay);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!searchHistory.hasOwnProperty(trimmedSearch)) {\n      const timeoutId = window.setTimeout(() => {\n        if (trimmedSearch !== \"\") {\n          /**\n           * A LIKE ... OR B LIKE ... OR C LIKE ...... unfortunately there isn't\n           * any shortcut statement for this kind of query, I have to list them\n           * all here\n           */\n          runQuery(`SELECT * WHERE A LIKE '%${trimmedSearch}%' OR B LIKE '%${trimmedSearch}%' OR C LIKE '%${trimmedSearch}%' OR D LIKE '%${trimmedSearch}%' OR E LIKE '%${trimmedSearch}%' OR F LIKE '%${trimmedSearch}%' OR G LIKE '%${trimmedSearch}%'`)\n            .then(resultLines => {\n              pushSearchHistory(trimmedSearch, resultLines);\n              parseCsv(resultLines)\n                .then(setSearchResult)\n                .then(() => setLoading(false));\n          });\n        } else {\n          setSearchResult(null);\n        }\n      }, 500);\n      return () => window.clearTimeout(timeoutId);\n    } else {\n      parseCsv(searchHistory[trimmedSearch])\n        .then(setSearchResult)\n        .then(() => setLoading(false));\n    }\n  }, [search, trimmedSearch, pushSearchHistory, searchHistory]);\n\n  useEffect(() => {\n    const el = inputRef.current;\n    if (el instanceof Element) { setPlaceholderHeight(el.getBoundingClientRect().height); }\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__input\" ref={inputRef}>\n        <div className=\"container\">\n          <input value={search} onChange={onSearchChange} placeholder=\"검색 搜尋\" ref={textRef} />\n        </div>\n      </div>\n      <div className=\"container\">\n        <div className=\"app__placeholder\" style={{height: placeholderHeight}} />\n        {!showIntro && !trimmedSearch && (!Array.isArray(searchResult) || searchResult.length === 0) ? <div className=\"app__guide\">輸入搜索字詞，結果會喺呢度顯示。</div> : null}\n        {loading && trimmedSearch ? renderSkeleton(3) : null}\n        {\n          showIntro && now ? (\n            <div className=\"app__intro\">\n              <h5>每日單字 오늘의 단어 ({`${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`})</h5>\n              {wordOfDay ? (<table><tbody><tr><td>{renderRow(wordOfDay)}</td></tr></tbody></table>) : renderSkeleton(1)}\n              <p>呢個係一個依照由 이정윤 老師提供嘅字典所做嘅簡單廣東話韓文詞典網頁程式，多謝老師每日教我哋韓文。</p>\n              <p>現已收錄 {typeof count === \"number\" ? count : \"...\"} 個記錄。</p>\n              <p>\n                資料來源<br />\n                •&nbsp;&nbsp;<a href=\"https://bit.ly/3oRQHCe\" target=\"_blank\" rel=\"noreferrer\">https://bit.ly/3oRQHCe</a>\n              </p>\n              <p>\n                廣東話同韓文Facebook群組<br />\n                •&nbsp;&nbsp;<a href=\"https://www.facebook.com/groups/806902066095149\" target=\"_blank\" rel=\"noreferrer\">https://www.facebook.com/groups/806902066095149</a>\n              </p>\n              <p>\n                到Buy Me a Coffee支持老師<br />\n                •&nbsp;&nbsp;<a href=\"https://www.buymeacoffee.com/ncOhltm\" target=\"_blank\" rel=\"noreferrer\">https://www.buymeacoffee.com/ncOhltm</a>\n              </p>\n              <p className=\"app__author\"><small>應用程式製作 by <a href=\"https://github.com/winghimjns\" target=\"_blank\" rel=\"noreferrer\">winghimjns</a></small></p>\n            </div>\n          ) : null\n        }\n        {!loading && Array.isArray(searchResult) && searchResult.length > 100 ? <center><code>{`總共有${searchResult.length}相關字詞，顯示首100個結果`}</code><br /><br /></center> : null}\n        {!loading && Array.isArray(searchResult) ? (\n          <table className=\"app__table\">\n            <tbody>\n              {searchResult.slice(0, 100).map((row, index) => {\n                return (\n                  <tr key={index}><td>\n                    {renderRow(row, trimmedSearch)}\n                  </td></tr>\n                );\n              })}\n            </tbody>\n          </table>\n        ) : null}\n        {!loading && Array.isArray(searchResult) && searchResult.length === 0 ? <center>沒有相關結果 결과가 없습니다</center> : null}\n        {!loading && Array.isArray(searchResult) && searchResult.length > 100 ? <center><code>{`總共有${searchResult.length}相關字詞，顯示首100個結果`}</code><br /><br /></center> : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}